{"0": {
    "doc": "CD-1",
    "title": "CD-1",
    "content": "# CD-1 evolution You can now write test programs with fewer parentheses: - `identity.cd`: ``` let f = lambda x. x in f 42 ``` - `ski.cd`: ``` let s = lambda x. lambda y. lambda z. x z (y z) in let k = lambda x. lambda y. x in let i = lambda x. x in s (s (k s) k) ``` Their ASTs are (essentially) the same as before. ",
    "url": "/cbs-ide/docs/validation/cd-1.html",
    "relUrl": "/docs/validation/cd-1.html"
  },"1": {
    "doc": "CD-1",
    "title": "CD-1",
    "content": "# CD-1 evolution This extension adds grouping disambiguation to the `CD` language, and allows you to write applications without parentheses. CBS currently uses the SDF3 meta-language for disambiguation, enclosing references to embedded grammar sorts and productions in back-ticks. ## Changes 1. Replace: ``` | exp '(' exp ')' ``` by: ``` | exp exp ``` 2. Replace: ``` Rule eval[[ E1 '(' E2 ')' ]] = ``` by: ``` Rule eval[[ E1 E2 ]] = ``` ## Additions ``` Syntax SDF /* context-free syntax ``exp ::= 'lambda' id '.' exp`` {longest-match} ``exp ::= exp exp`` {left} ``exp ::= 'let' id '=' exp 'in' exp`` {longest-match} context-free priorities ``exp ::= exp exp`` > { ``exp ::= 'lambda' id '.' exp`` ``exp ::= 'let' id '=' exp 'in' exp`` } */ Lexis SDF /* lexical syntax ``id`` = ``keyword`` {reject} lexical restrictions ``id`` -/- [a-z0-9] ``int`` -/- [0-9] */ ``` {:.note} > You could put disambiguation specifications in a separate file, > e.g., named `CD-Disambiguation.cbs` ",
    "url": "/cbs-ide/docs/specification/cd-1.html",
    "relUrl": "/docs/specification/cd-1.html"
  },"2": {
    "doc": "CD-2",
    "title": "CD-2",
    "content": "# CD-2 evolution *Pending* ",
    "url": "/cbs-ide/docs/validation/cd-2.html",
    "relUrl": "/docs/validation/cd-2.html"
  },"3": {
    "doc": "CD-2",
    "title": "CD-2",
    "content": "## CD-2 language extension *Pending* ",
    "url": "/cbs-ide/docs/specification/cd-2.html",
    "relUrl": "/docs/specification/cd-2.html"
  },"4": {
    "doc": "Home",
    "title": "Home",
    "content": "# CBS IDE User Guide This user guide is for the prototype CBS-beta IDE. ",
    "url": "/cbs-ide/",
    "relUrl": "/"
  },"5": {
    "doc": "Formatting",
    "title": "Formatting",
    "content": "# Formatting *Pending* ## LaTeX ## KaTeX ## Plain ",
    "url": "/cbs-ide/docs/formatting/",
    "relUrl": "/docs/formatting/"
  },"6": {
    "doc": "Specification",
    "title": "Specification",
    "content": "# Specification This page illustrates how to create a language specification for use with the CBS IDE. You should [install the CBS IDE] in Spoofax and [install the CBS-beta repository] in your file system before proceeding. ## Create folders and links in the file system 1. Create a folder for your own collection of languages, e.g.: `My-Languages` 2. Choose a *full* name for your language (no spaces), e.g.: `CBS-Demo` 3. Create the folder `CBS-Demo` in `My-Languages` 4. Choose a *short* name for your language, e.g.: `CD` 5. Create the folder `CD-cbs` in `CBS-Demo` 6. Create the folder `CD` in `CD-cbs` 7. Create the folder `CD-Start` in `CD` 8. Create a *symbolic link* in `CD-cbs` to your copy of `CBS-beta/Funcons-beta` Your resulting folder hierarchy should look something like this:[^editor] ``` My-Languages - CBS-Demo - CD-cbs - CD - CD-Start - Funcons-beta -> YOUR-PATH-TO/CBS-beta/Funcons-beta CBS-beta - ... - Funcons-beta - ... ``` ## Create a CBS language specification project in Spoofax 1. Make `CD-cbs` a *general project* 1. Select `File: New: Project...: Wizards: General: Project`, click `Next` 2. Project Name : `CD-cbs` Location : `YOUR-PATH-TO/My-Languages/CBS-Demo/CD-cbs`, click `Finish` 2. Add the *Spoofax nature* to the `CD-cbs` project: 1. Right-click on the project 2. Select `Spoofax: Add Spoofax nature` 3. Spoofax should now analyse your project (about 30 seconds), otherwise 1. Check that the `CBS` language project has already been built 2. Check that the `Spoofax (meta)` menu indicates that analysis is enabled 2. Try cleaning the `CD-cbs` project 4. Expand the folder `CD-cbs/Funcons-beta/Funcons-Index` and open an editor on the file `Funcons-Index.cbs` 5. Check that: 1. There are no parse errors 2. CBS keywords and names are highlighted 3. Command- or Control-hovering over names makes them hyperlinks 4. Clicking a hyperlink opens an editor showing the declaration of the name ## Specify your language 1. Check that the `Spoofax (meta)` menu indicates that analysis is currently enabled 2. Create a file named `CD-Start.cbs` in the `CD-Start` folder with the following contents:[^tabs] ``` Language \"CBS-Demo\" Syntax START:start ::= exp Semantics start[[ _:start ]] : =>values Rule start[[ E ]] = initialise-binding finalise-failing eval[[ E ]] Syntax E:exp ::= int | id | 'lambda' id '.' exp | exp '(' exp ')' | 'let' id '=' exp 'in' exp | '(' exp ')' Semantics eval[[ _:exp ]] : => values Rule eval[[ N ]] = int[[ N ]] Rule eval[[ X ]] = bound id[[ X ]] Rule eval[[ 'lambda' X '.' E ]] = function closure scope( bind( id[[ X ]], given ), eval[[ E ]] ) Rule eval[[ E1 '(' E2 ')' ]] = apply( eval[[ E1 ]], eval[[ E2 ]] ) Rule eval[[ 'let' X '=' E1 'in' E2 ]] = scope( bind( id[[ X ]], eval[[ E1 ]] ), eval[[ E2 ]] ) Rule eval[[ '(' E ')' ]] = eval[[ E ]] Lexis N:int ::= ('0'-'9')+ Semantics int[[ N:int ]] : => integers = decimal \\\"N\\\" Lexis X:id ::= ('a'-'z') ('a'-'z'|'0'-'9')* Semantics id[[ X:id ]] : => identifiers = \\\"X\\\" ``` 2. Check that: 1. There are no parse errors 2. CBS keywords and names are highlighted 3. Command- or Control-hovering over names makes them hyperlinks 4. Clicking a hyperlink scrolls to the declaration of the name {:.note} > You can now [validate][Validation] the above language specification > by generating a translator from programs to funcons, > and checking the outcomes of executing translations of test programs ## Evolve a language and its specification The following pages suggest various extensions of the language specified above. You can add extensions to the specification of language syntax and semantics in `CD-Start.cbs` in any order. However, specification of syntactic grouping disambiguation is less modular; following the order shown below should ensure correct parsing of the suggested test programs when validating each extension. In CBS, a language specification is *not* treated as a reusable component. You should invasively edit it when extending the specified language. If you commit each extension to a repository, you can compare commits to display their differences visually in Spoofax (the local history feature might also be used). ---- [^tabs]: To ensure that indentation is preserved when viewing CBS specifications in different editors and browsers, avoid conversion of spaces to tab characters when entering or editing text. [^editor]: `CBS-Demo` will contain also the generated `CD-Editor`, and a folder `CD-Tests` of test programs. The `CD` folder supports division of a language specification into multiple sections. Folders such as `CD-Start` can contain formatted versions of CBS source files. {% include links.md %} ",
    "url": "/cbs-ide/docs/specification/",
    "relUrl": "/docs/specification/"
  },"7": {
    "doc": "Installation",
    "title": "Installation",
    "content": "# Installation {: .no_toc } This page lists the software required for using the various features of the CBS IDE, and gives links to sites from where the software can be downloaded. Contents {: .text-delta } - TOC {:toc} ## CBS IDE The CBS IDE supports generating editors and translators for languages from their specifications in the CBS frameowrk. ### Spoofax The CBS IDE is implemented as a language project in the [Spoofax](https://www.metaborg.org/en/latest/) language workbench. - Download [Spoofax 2.5.16](https://www.metaborg.org/en/latest/source/release/note/2.5.16.html#downloads). - See [Installing Spoofax](https://www.metaborg.org/en/latest/source/install.html). - Before opening, [increase the Eclipse memory](https://www.metaborg.org/en/latest/source/install.html#changing-eclipse-memory-allocation) (preferably to 6G, but at least 4G). - View the Spoofax console: `Window: Show view: Other: General: Console`. #### Sunshine You can run Spoofax menu actions in batch mode using the Sunshine JAR command line utility. - Download [Sunshine JAR for Spoofax 2.5.16](https://www.metaborg.org/en/latest/source/release/note/2.5.16.html#command-line-utilities) - Run `java -jar YOUR-PATH-TO-SUNSHINE-JAR --help` for a list of available options (Sunshine is *not* needed for interactive use of Spoofax.) #### MacOS Catalina and Big Sur To build editors and translators generated by the CBS IDE: - Install [Docker](https://docs.docker.com/docker-for-mac/install/) - Install [GNU coreutils](https://www.gnu.org/software/coreutils/) - Open the Spoofax app from a terminal (instead of double-clicking its icon) ### CBS language project Download the [prototype branch](https://github.com/plancomps/cbs-beta-tools/tree/prototype) of the **cbs-beta-tools** repository. {:.note} > The **cbs-beta-tools** repository is currently private. > To request access, email your name, affiliation, and GitHub name to > [plancomps@gmail.com](mailto:plancomps@gmail.com). - Import CBS into Spoofax as a *Maven* project. The version number in `pom.xml` and `.mvn/extensions.xml` needs to match the Spoofax version number (2.5.16). - In case of Maven errors: - Right-click the project - Select `Maven > Update project...` - Check `Force Update of Snapshots/Releases` - Click `OK` - Build the CBS language project (it can take 3â€“4 minutes). ### CBS-beta repository The CBS-beta repository includes *collections of funcon definitions* as projects. These are reused in language specifications using symbolic links. The repository also contains *illustrative language specifications* as projects. These projects are independent of each other. You can browse all specifications in the CBS-beta repository online on the [CBS-beta] website, as source files, web pages, and PDFs. For local browsing, download the [math branch] of the repository. To serve the web pages locally, install the [Jekyll] static website generator. ## Funcon interpreters Apart from running funcon terms directly, funcon interpreters can run programs via their translation to funcons. Install [Funcons-Tools 0.2.11](https://hackage.haskell.org/package/funcons-tools). Installation requires the [Haskell](https://www.haskell.org) and [Cabal toolchain](https://cabal.readthedocs.io/en/3.4/getting-started.html). ## LaTeX The CBS IDE can generate LaTeX from (literate) CBS specifications. To produce PDFs, install [TeX Live](https://www.tug.org/texlive/), or use an online LaTeX editor such as [Overleaf](https://www.overleaf.com). {% include links.md %} ",
    "url": "/cbs-ide/docs/installation/",
    "relUrl": "/docs/installation/"
  },"8": {
    "doc": "Interface",
    "title": "Interface",
    "content": "# Interface This page indicates which menus and buttons are used by the CBS IDE. ## Menus Use the following menus for CBS specifications: **Project** : Use **Clean...** if an analysis needs refreshing. Keep **Build Automatically** enabled. **Run** : Add funcon interpreters as **External Tools**, customise their display with **Organize Favorites**, and run them by clicking a button. **Spoofax** : Use to generate editors, HTML, and LaTeX from CBS specifications, and to generate funcons from programs. **Spoofax (meta)** : Use to disable static analysis of CBS specifications temporarily while editing.[^disable] ## Projects Use the project explorer to: - import projects - inspect which files projects contain - open language editors ## Console Follow the progress of Spoofax with generating and building artefacts in the Spoofax console. ## Annotations Many of the language specifications in CBS-beta have \"info\" annotations (usually indicating incomplete argument checking in funcon terms). The default Spoofax setting for infos is to show the source with squiggly lines. You can turn this off in the preferences: `General: Editors: Text Editors: Annotations: Infos`, uncheck `Text as`. # Browsing You can browse the [CBS-beta] collections of funcons definitions and language specifications as web pages and PDfs, both locally and online. Highlighting of keywords and the various kinds of names makes the specifications easier to read. Moreover, each name reference is hyperlinked to the corresponding declaration, so you do not need to become familiar with the hierarchical structure of the repository. You can also browse the source files of CBS specifications locally using Spoofax, with the same highlighting and hyperlinks. ## Web pages Use any browser. [Install the CBS-beta repository] to browse its web pages locally. Use [Jekyll] to serve the pages; they may require Internet access. ## PDFs On macOS (Catalina and Big Sur), neither the Preview app nor the Safari web browser currently supports scrolling to hyperlink targets inside different PDFs, which badly affects browsing PDFs of CBS specifications. In contrast, Firefox supports accurate and seamless browsing of both PDFs and web pages. ## Source files You can browse the CBS source files in the [CBS-beta] collections online [on GitHub][math branch]. [Install the CBS IDE] to browse CBS specification source files with highlighting and hyperlinks using Spoofax. ---- [^disable]: Static analysis of CBS specifications is currently non-incremental, and generally takes at least 30 seconds, due to re-analysing unchanged collections of funcons. The Spoofax default is to reanalyse every time you stop typing... {% include links.md %} ",
    "url": "/cbs-ide/docs/interface/",
    "relUrl": "/docs/interface/"
  },"9": {
    "doc": "Overview",
    "title": "Overview",
    "content": "# Overview A prototype of a CBS IDE is available [on request](mailto:plancomps@gmail.com). This website provides guidance on using the prototype, assuming familiarity with CBS. See the [CBS-beta website][CBS-beta] for information about the CBS framework. [Installation] : Software requirements, with links to download sites [Interface] : Using Spoofax menu actions and browsing specifications [Specification] : Creating and editing language specifications [Validation] : Generating language editors to validate specifications [Formatting] : Generating LaTeX documents and web pages from specifications # Development Although the prototype CBS IDE is not yet fully developed, and has not been released, it has been successfully used in the PLanCompS project for the following purposes: - Checking the funcon definitions and language specifications in the [CBS-beta] collections for name resolution and arity consistency; - Generating editors, parsers, and translators for the specified languages; - Editing and parsing test programs in specified languages; - Validating language specifications by translating test programs to funcons, and checking that executing the funcons gives the expected outcomes; - Generating HTML and LaTeX documents from CBS source files. However, users should be aware of some [issues] with the current version of the prototype. {% include links.md %} ",
    "url": "/cbs-ide/docs/",
    "relUrl": "/docs/"
  },"10": {
    "doc": "Issues",
    "title": "Issues",
    "content": "# Issues The known issues with the current prototype CBS IDE include the following. ## Responsiveness of name analysis Name analysis of CBS specifications is currently *non-incremental*, and generally takes at least 30 seconds, due to re-analysing unchanged collections of funcons. Every time you stop typing, Spoofax starts to reanalyse the current file, together with all the files that its name analysis depends on -- and a CBS language specification always depends on Funcons-beta. As a work-around, you can disable name analysis while editing a CBS specification, and re-enable it when you want to check for well-formedness. For regression testing, you can use scripts to run the CBS IDE non-interactively. ## Implementation of name analysis Name analysis in currently implemented in the *NaBL2* meta-language. Spoofax has stopped development of NaBL2, and has released the Statix meta-language for future use when implementing name analysis. Re-implementation of CBS name analysis in Statix may take some time, due to significant differences between NaBL2 and Statix. ## Rebuilding generated editor projects Rebuilding generated editors and translators after editing their CBS specifications is currently *non-incremental*, and generally takes between one and five minutes. When you add or modify a translation rule for a specified language, Spoofax recompiles not only the Stratego code generated from all the CBS rules, but also numerous Stratego libraries. And when you extend or modify the grammar of a specified language, or add a new translation function, Spoofax also regenerates all the parse tables. Spoofax already has experimental implementations of incremental Stratego compilation and parse table generation. When these are sufficiently reliable, the CBS IDE will be reconfigured to use them, and rebuilding generated editors and translators should become much quicker. An aggravating factor is that the CBS IDE currently requires Spoofax to parse rewriting rules that use *concrete* program syntax, which involves extra steps. Changing the CBS IDE to generate abstract syntax rewriting rules should reduce build times, and simplify the generated parsers. ## Dependency of hyperlinks on paths The hyperlinks from names to their declarations in generated HTML and LaTeX documents currently use (relative) paths. CBS specifications are independent of paths to the files where declarations are stored. However, changing the path to a declaration (or moving a declaration between files) invalidates all hyperlinks to it. To address this issue, hyperlinks to name declarations should never include paths -- merely the name (and what sort of name it is) and the name of the funcon collection or language specification where the name is declared. The CBS-beta website should map URLs in such hyperlinks to the corresponding paths, based on the current multi-file name analysis. ## Generation of funcons indexes The source file for [Funcons-Index] was created manually; the CBS IDE should generate it from the definitions in [Funcons-beta]. (The CBS IDE already generates index files for funcons used by specified languages.) ## Literate CBS The current CBS grammar requires explanatory comments to be enclosed in `/*...*/`. For literate specification (as illustrated in [Unstable-Funcons-beta]), it would be better for CBS specifications to be Markdown documents, with formal definitions embedded in informal text using code fences. For compatibility with the current CBS tools, files with literate CBS specifications should have a different extension, e.g., `cbs-md`. The CBS IDE can then extract the contents of the code fences to produce a plain `cbs` file. It can also replace the formal CBS by HTML or LaTeX code to produce Markdown files, from which existing formatting tools can generate web pages and PDFs with highlighting and hyperlinks. The current CBS notation for section headings (and links to numbered sections) should be replaced by standard Markdown notation in literate CBS. {% include links.md %} ",
    "url": "/cbs-ide/docs/issues/",
    "relUrl": "/docs/issues/"
  },"11": {
    "doc": "Validation",
    "title": "Validation",
    "content": "# Validation This page illustrates how to validate a language specification by generating a translator from programs to funcons, and checking the outcomes of executing translations of test programs. ## Generate an editor and translator You should [specify your language] before proceeding with the following steps. ### Create an editor project 1. Create a *Spoofax language project* named `CD-Editor` with the following settings: Project name : `CD-Editor` Use default location : unchecked Location : `YOUR-PATH-TO/My-Languages/CBS-Demo` Identifier : `CD-Editor` (*not* `CDEditor`!) Name : `CD` (*not* `CD-Editor`!) Version : (e.g.) `0.1.0-SNAPSHOT` Group identifier : (e.g.) `org.example` Extensions : `cd` and the following *language options* settings: Syntax type : `SDF3` Analysis type : `NaBL2 (deprecated)` The optional *generation options* settings determine whether extra projects will be created, e.g., for examples and automated tests 2. Open the `Console` view in Eclipse (`Window: Show View: Other...`). 3. Click on `Finish` to create the language project. It can take about a minute. The progress is logged in the Spoofax Console. ### Generate the editor and translator implementation Next, use the CBS IDE to generate Spoofax meta-language files in the CD-Editor project. {:.note} > Eclipse may initially flag various errors and warnings in the generated files. > The errors should all disappear when the `CD-Editor` project has been successfully built; > some warnings (e.g., about overloaded constructors in SDF3 files) may remain, but can be ignored. 1. Clean the `CD-cbs` project 2. Open `CD-cbs/CD/CD-Start/CD-Start.cbs` 3. Select `Spoofax: Generate: Language editor` The Spoofax console window should report something like the following: - Generating CD-Start components... - Generating CD-Start - Finished (Ignore errors regarding `LanguageIdentifierService`.) The `CD-Editor` project should now include the following files: ``` editor - Menus.esv lib - StrategoMix.def syntax - Funcons.sdf3 - Stratego-CD.sdf - cbs-gen - CD-Start.sdf3 trans - generate.meta - generate.str - cbs-gen - CD-Start.meta - CD-Start.str ``` {:.note} > Do not edit the files generated by the CBS IDE 3. Update the following files generated by Spoofax: - Edit `editor/Main.esv` to import first `Menus` - Edit `trans/cd.str` to import the generated Stratego module `generate` - Delete the file `syntax/Common.sdf3`, which is not used by CBS 4. Clean the `CD-Editor` project (Ignore any warnings or error reports regarding files in `src-gen/ds-signatures`) 5. Build the `CD-Editor` project It may take about a minute. The console should not show any warnings or error reports. ## Create a project with some test programs 1. Create a *general project* named `CD-Tests` in `CBS-Demo` 2. Check that the `Spoofax (meta)` menu indicates that analysis is enabled 3. Add the *Spoofax nature* to the `CD-Tests` project: 1. Right-click on the project 2. Select `Spoofax: Add Spoofax nature` 4. Create a folder named `CD-1` in the `CD-Tests` project 5. Create the following files in the `CD-1` folder: - `int.cd`: ``` 42 ``` - `identity.cd`: ``` let f = lambda x. x in (f(42)) ``` - `let.cd`: ``` let m = 42 in let n = m in n ``` - `ski.cd`: ``` let s = lambda x. lambda y. lambda z. (x(z)(y(z))) in let k = lambda x. lambda y. x in let i = lambda x. x in (s(s(k(s))(k))) ``` 6. Clean the `CD-Tests` project 7. Check that: 1. There are no parse errors or ambiguities 2. CD keywords are highlighted ## Translate programs to funcons 1. Focus on the `int.cd` editor window 2. Select `Spoofax: Generation: Generate funcons` 3. Check that the generated file `int.fct` contains: ``` initialise-binding finalise-failing decimal \"42\" ``` 4. Generate funcons for all the other programs in `CD-Tests` ## Add a funcon interpreter 1. [Install the funcons-tools package] 2. Select `Run: External Tools: External Tools Configurations...` 3. Click `New launch configuration` then enter the following settings: Name : `Run funcons` Main : Location: `YOUR-PATH-TO/runfct` : Arguments: `${resource_loc}` Build : Build before launch: unchecked Click `Apply` then `Close` 4. Select `Run: External Tools: Organize Favorites...` 1. Click `Add` 2. Select `Run funcons` 3. Click `OK` Click `OK` ## Execute funcon terms 1. Focus on the `int.fct` editor window 2. Select `Run: External Tools: Run funcons` 3. Check that the Spoofax console reports: ``` Result: 42 ``` 4. Execute the funcons for all the other programs in `CD-Tests` ---- [^funcons]: No Stratego code is generated from funcon definitions. {% include links.md %} ",
    "url": "/cbs-ide/docs/validation/",
    "relUrl": "/docs/validation/"
  }
}
